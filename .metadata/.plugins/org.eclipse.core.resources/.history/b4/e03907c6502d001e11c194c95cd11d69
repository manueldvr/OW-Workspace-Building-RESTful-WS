# Building a RESTful Web Service

This guide walks you through the process of creating a “Hello, World” RESTful web service with Spring.

## Considerations

Motivated by the HTTP technology and several small RFC standards.

Characteristics:

- Basado en el protocolo HTTP
- Stateless
- Representados por una URI
- Interfaz uniforme
- Sistema de capas


### REST vs RPC

- RPC (remote procedure call) function or service oriented.
- REST resource oriented, -orientado a ofrecer recursos.

URI examples:

| RPC      | REST |
| :--- | :--- |
| /myapi/beerService/getAll      | /myapi/beers       |
| /myapi/beerService/getById   | /myapi/beer/123        |




## What You Will Build

You will build a service that will accept HTTP GET requests at:

`http://localhost:8080/greeting`
 
It will respond with a JSON representation of a greeting, as the following listing shows:

```
{"id":1,"content":"Hello, World!"}
```

You can customize the greeting with an optional `name` parameter in the query string, as the following listing shows:

`http://localhost:8080/greeting?name=User`

The `name` parameter value overrides the default value of `World` and is reflected in the response, as the following listing shows:

{"id":1,"content":"Hello, User!"}

## Source study



```
	@GetMapping("/greeting")
	public Greeting greeting(@RequestParam(value = "name", defaultValue = "World") String name) {
		return new Greeting(counter.incrementAndGet(), String.format(template, name));
```
